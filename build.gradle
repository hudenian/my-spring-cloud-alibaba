plugins {
    id 'org.springframework.boot' version '2.3.3.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'com.bmuschko.docker-spring-boot-application' version '6.1.3'
}

allprojects {
    version '1.0.0'
    group 'com.huma'

    apply plugin: 'io.spring.dependency-management'

    ext {
        //如果url不指定的话
        //Mac默认：url = https://index.docker.io/v1/
        //Unix默认: url = unix:///var/run/docker.sock
        //Windows默认: url = tcp://127.0.0.1:2375
        set('dockerUrl', "https://index.docker.io/v1/")
        set('dockerUsername', "hudenian")
        set('dockerPassword', "")
        set('dockerEmail', "hudenian@163.com")
        set('dockerBaseImage', "openjdk:8")
        set('dockerMaintainer', "Yanzheng (https://github.com/micyo202)")

        set('springBootVersion', "2.2.6.RELEASE")
        set('springBootAdminVersion', "2.2.1")
        set('springCloudVersion', "Hoxton.SR8")
        set('springCloudAlibabaVersion', "2.2.3.RELEASE")

        set('lombokVersion', "1.18.12")
        set('junitJupiterVersion', "5.6.2")
        set('junitPlatformLauncherVersion', "1.6.2")

        set('sentinelVersion', "1.7.1")
        set('druidVersion', "1.1.23")
        set('velocityEngineVersion', "2.2")
        set('pagehelperVersion', "1.2.13")
        set('knife4jVersion', "2.0.2")

        set('redissonVersion', "3.12.4")
        set('commonsLangVersion', "3.10")
        set('commonsCollections4Version', "4.4")
        set('xstreamVersion', "1.4.12")
        set('httpclientVersion', "4.5.12")
        set('servletVersion', "4.0.1")
        set('servoVersion', "0.13.0")
        set('bouncyCastleVersion', "1.69")
    }

    dependencyManagement {
        imports {
            mavenBom "de.codecentric:spring-boot-admin-dependencies:${springBootAdminVersion}"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
            mavenBom "com.alibaba.cloud:spring-cloud-alibaba-dependencies:${springCloudAlibabaVersion}"
        }

        dependencies {
            dependency "com.alibaba:druid-spring-boot-starter:${druidVersion}"
            dependency "org.apache.velocity:velocity-engine-core:${velocityEngineVersion}"
            dependency "com.github.pagehelper:pagehelper-spring-boot-starter:${pagehelperVersion}"
            dependency "com.github.xiaoymin:knife4j-spring-boot-starter:${knife4jVersion}"
            dependency "com.alibaba.csp:sentinel-spring-cloud-gateway-adapter:${sentinelVersion}"

            dependency "org.springframework.boot:spring-boot-starter-data-redis:${springBootVersion}"
            dependency "org.redisson:redisson:${redissonVersion}"
            dependency "org.apache.commons:commons-lang3:${commonsLangVersion}"
            dependency "org.apache.commons:commons-collections4:${commonsCollections4Version}"
            dependency "com.thoughtworks.xstream:xstream:${xstreamVersion}"
            dependency "org.bouncycastle:bcprov-jdk15on:${bouncyCastleVersion}"
            dependency "org.apache.httpcomponents:httpclient:${httpclientVersion}"
            dependency "javax.servlet:javax.servlet-api:${servletVersion}"
            dependency "com.netflix.servo:servo-core:${servoVersion}"
        }
    }

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }

}

subprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    // java编译的时候缺省状态下会因为中文字符而失败
    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'
    ext {
        set('springBootVersion', "2.3.3.RELEASE")
        set('springCloudAlibabaVersion', "2.2.1.RELEASE")
        set('springCloudVersion', "Hoxton.SR2")
        set('lombokVersion', "1.18.12")
    }

    test {
        useJUnitPlatform()
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    tasks.withType(Javadoc) {
        options.encoding = 'UTF-8'
    }

    repositories {
        mavenLocal()
        maven {
            url 'https://maven.aliyun.com/repository/public/'
        }
        maven {
            url 'https://maven.aliyun.com/repository/spring/'
        }
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
        maven {
            url 'https://repo.maven.apache.org/maven2'
            name 'Maven Central'
        }
        maven {
            url 'https://repo.spring.io/milestone'
        }
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
        // springcloud的gateway使用的是webflux,默认使用netty,所以从依赖中排除 tomcat相关的依赖
        implementation.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
    }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-undertow'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        implementation 'com.github.xiaoymin:knife4j-spring-boot-starter:3.0.3'
        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }
    }
    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
            mavenBom "com.alibaba.cloud:spring-cloud-alibaba-dependencies:${springCloudAlibabaVersion}"
        }
    }

    /**
     * clean 命令时删除 logs 目录
     */
    task cleanOutDir(type: Delete) {
        delete "${projectDir}/logs"
        delete "${rootDir}/logs"
    }
    tasks.clean.dependsOn(cleanOutDir)
}
